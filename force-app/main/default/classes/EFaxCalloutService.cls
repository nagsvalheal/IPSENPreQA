/**
 * @description       : Service class for interacting with the eFax API, including sending faxes, retrieving images, 
 *                      and managing access tokens for authentication.
 * @author            : 
 * @group             : 
 * @last modified on  : 09-22-2023
 */
public class EFaxCalloutService {
    final static String EFAX_ACCESS_TOKEN = 'EFAXACCESSTOKEN';
    final static String EFAX_NAMED_CREDENTIALS = 'callout:eFaxService';
     /**
     * @description Retrieves the eFax API access token from the cache or generates a new one if not present.
     * @return The access token as a String.
     */ 
    public static String getAccessToken(){
        String accessTokenFromCache = CalloutServiceUtility.getFromCache(EFAX_ACCESS_TOKEN);
        if(accessTokenFromCache!=null){
            return accessTokenFromCache;
        }else {
            return getNewAccessToken();
        }
    }
/**
     * @description Generates a new eFax API access token by calling the authentication endpoint.
     * @return The newly generated access token as a String.
     */
    public static String getNewAccessToken(){
        String endpoint = EFAX_NAMED_CREDENTIALS+'/tokens';
        String method = 'POST';
        String body = 'grant_type=client_credentials';
        HttpRequest req = CalloutServiceUtility.constructRequest(endpoint, method, body, null);
        String responseString = CalloutServiceUtility.callout(req);
        AuthResponse authResponse = (AuthResponse) JSON.deserialize(responseString, AuthResponse.class);
        CalloutServiceUtility.addToCache(EFAX_ACCESS_TOKEN, authResponse.access_token);
        return authResponse.access_token;
    }
 /**
     * @description Sends a fax with specified destinations, documents, and options using the eFax API.
     * @param destinations List of fax destinations.
     * @param documents List of documents to send as part of the fax.
     * @param faxOptions Fax options like resolution and cover page details.
     * @param userId User ID to include in the callout headers.
     * @return The fax ID generated by the eFax API or null in case of an error.
     */
    public static String sendFax(List<Destination> destinations, List<Document> documents, FaxOptions faxOptions, String userId){
        try{

            FaxDetails faxDetails = new FaxDetails();
            faxDetails.destinations = destinations;
            faxDetails.documents = documents;
            faxDetails.fax_options = faxOptions;
            
            String body = JSON.serialize(faxDetails);
            GenericLogger.debugLog(body);
            return sendFaxCallout(body, userId);
        }catch(Exception ex){
            GenericLogger.exceptionLog('EFaxCalloutService','sendFax',ex);
            return null;
        }
    }
/**
     * @description Retrieves a fax image from the eFax API in the desired format (e.g., PDF).
     * @param faxId The ID of the fax to retrieve.
     * @param userId User ID to include in the callout headers.
     * @return The response string containing the fax image data.
     */
    public static String getFaxImageCallout(String faxId, String userId){
        try{

            String accessToken = getAccessToken();
            String endpoint = EFAX_NAMED_CREDENTIALS+'/faxes/'+faxId+'/image?desired_format=PDF';
            String method = 'GET';
            Map<String, String> header = new Map<String, String>();
            header.put('Authorization','Bearer '+accessToken);
            header.put('Content-Type','application/json');
            header.put('user-id',userId);
            HttpRequest req = CalloutServiceUtility.constructRequest(endpoint, method, null, header);
            String responseString = CalloutServiceUtility.callout(req);
            return responseString;
        }catch(Exception ex){
            GenericLogger.exceptionLog('EFaxCalloutService','sendFax',ex);
            return null;
        }
    }
/**
     * @description Makes the API call to send a fax with the given request body and headers.
     * @param body The serialized JSON body for the fax request.
     * @param userId User ID to include in the callout headers.
     * @return The fax ID generated by the eFax API or null in case of an error.
     */
    public static String sendFaxCallout(String body, String userId){
        String accessToken = getAccessToken();
        String endpoint = EFAX_NAMED_CREDENTIALS+'/faxes';
        String method = 'POST';
        String faxId = '';
        Map<String, String> header = new Map<String, String>();
        header.put('Authorization','Bearer '+accessToken);
        header.put('Content-Type','application/json');
        header.put('user-id',userId);
        HttpRequest req = CalloutServiceUtility.constructRequest(endpoint, method, body, header);
        String responseString = CalloutServiceUtility.callout(req);
        List<Response> responseList = (List<Response>)JSON.deserialize(responseString, List<Response>.class);
        for(Response response : responseList){
            faxId = response.fax_id;
        }
        return faxId;
    }
/**
     * @description Represents the authentication response returned by the eFax API.
     */
    public class AuthResponse{
        public String access_token;	
        public String token_type;	
        public String expires_in;	
        public String scope;
        public String jti;
    }
/**
     * @description Represents the details of a fax, including destinations, documents, and options.
     */
    public class FaxDetails{
        public Destination[] destinations;
        public Document[] documents;
        public FaxOptions fax_options;
    }
    /**
     * @description Represents a fax destination with details like name, company, and fax number.
     */
    public class Destination {
        public String to_name;	
        public String to_company;
        public String fax_number;	
    }
    /**
     * @description Represents a document to be sent via fax.
     */
    public class Document {
        public String document_type;	
        public String document_content;	
    }
 /**
     * @description Represents options for sending a fax, including resolution and cover page settings.
     */
    public class FaxOptions{
        public String image_resolution; 
        public Boolean include_cover_page;
        public String custom_CSID; 
        public CoverPagOptions cover_page_options; 
    }
/**
     * @description Represents the cover page options for a fax.
     */
    public class CoverPagOptions{
        public String from_name; 
        public String subject; 
        public String message;  
    }
 /**
     * @description Represents retry options for sending a fax.
     */
    public class RetryOptions{
        public Integer non_billable; 
        public Integer billable; 
        public Integer human_answer; 
    }
/**
     * @description Represents the response from the eFax API after sending a fax.
     */
    public class Response{
        public String fax_id;
        public String destination_fax_number;
    }
}